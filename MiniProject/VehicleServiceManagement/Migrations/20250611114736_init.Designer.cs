// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VSM.Contexts;

#nullable disable

namespace VehicleServiceManagement.Migrations
{
    [DbContext(typeof(VSMContext))]
    [Migration("20250611114736_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceServiceCategory", b =>
                {
                    b.Property<Guid>("ServiceCategoriesCategoryID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesServiceID")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceCategoriesCategoryID", "ServicesServiceID");

                    b.HasIndex("ServicesServiceID");

                    b.ToTable("ServiceServiceCategory");
                });

            modelBuilder.Entity("VSM.Models.Bill", b =>
                {
                    b.Property<Guid>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServiceRecordID")
                        .HasColumnType("uuid");

                    b.HasKey("BillID");

                    b.HasIndex("ServiceRecordID")
                        .IsUnique();

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("VSM.Models.BillCategoryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillCategoryDetail");
                });

            modelBuilder.Entity("VSM.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Slot")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("VSM.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("VSM.Models.Mechanic", b =>
                {
                    b.Property<Guid>("MechanicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MechanicId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("VSM.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("VehicleID")
                        .HasColumnType("uuid");

                    b.HasKey("ServiceID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("VSM.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryID");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("VSM.Models.ServiceRecord", b =>
                {
                    b.Property<Guid>("ServiceRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MechanicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ServiceRecordID");

                    b.HasIndex("BookingID")
                        .IsUnique();

                    b.HasIndex("CustomerID");

                    b.HasIndex("MechanicId");

                    b.HasIndex("ServiceID")
                        .IsUnique();

                    b.ToTable("serviceRecords");
                });

            modelBuilder.Entity("VSM.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<byte[]>("HashKey")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TTL")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VSM.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("VechicleManufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VehicleID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ServiceServiceCategory", b =>
                {
                    b.HasOne("VSM.Models.ServiceCategory", null)
                        .WithMany()
                        .HasForeignKey("ServiceCategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VSM.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VSM.Models.Bill", b =>
                {
                    b.HasOne("VSM.Models.ServiceRecord", "ServiceRecord")
                        .WithOne("Bill")
                        .HasForeignKey("VSM.Models.Bill", "ServiceRecordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Bill_ServiceRecord");

                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("VSM.Models.BillCategoryDetail", b =>
                {
                    b.HasOne("VSM.Models.Bill", "Bill")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("VSM.Models.Booking", b =>
                {
                    b.HasOne("VSM.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VSM.Models.Customer", b =>
                {
                    b.HasOne("VSM.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("VSM.Models.Customer", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VSM.Models.Mechanic", b =>
                {
                    b.HasOne("VSM.Models.User", "User")
                        .WithOne("Mechanic")
                        .HasForeignKey("VSM.Models.Mechanic", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Mechanic_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VSM.Models.Service", b =>
                {
                    b.HasOne("VSM.Models.Vehicle", "Vehicle")
                        .WithMany("Services")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Service_Vehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VSM.Models.ServiceRecord", b =>
                {
                    b.HasOne("VSM.Models.Booking", "Booking")
                        .WithOne("ServiceRecord")
                        .HasForeignKey("VSM.Models.ServiceRecord", "BookingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecord_Booking");

                    b.HasOne("VSM.Models.Customer", "Customer")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecord_Customer");

                    b.HasOne("VSM.Models.Mechanic", "Mechanic")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecord_Mechanic");

                    b.HasOne("VSM.Models.Service", "Service")
                        .WithOne("ServiceRecord")
                        .HasForeignKey("VSM.Models.ServiceRecord", "ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceRecord_Service");

                    b.Navigation("Booking");

                    b.Navigation("Customer");

                    b.Navigation("Mechanic");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("VSM.Models.Bill", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("VSM.Models.Booking", b =>
                {
                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("VSM.Models.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("VSM.Models.Mechanic", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("VSM.Models.Service", b =>
                {
                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("VSM.Models.ServiceRecord", b =>
                {
                    b.Navigation("Bill");
                });

            modelBuilder.Entity("VSM.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("VSM.Models.Vehicle", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
